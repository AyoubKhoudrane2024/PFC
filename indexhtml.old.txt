<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Explorador de Archivos</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="bg-light">

  <div class="container py-4">
    <h2 class="mb-4">Explorador de Archivos</h2>

    <!-- Navegación por carpetas -->
    <nav>
      <ol class="breadcrumb" id="breadcrumb"></ol>
    </nav>

    <!-- Controles -->
    <div class="mb-3 d-flex flex-wrap gap-2">
      <input type="file" id="fileInput" multiple webkitdirectory directory class="form-control w-auto">
      <button class="btn btn-primary" onclick="uploadFiles()">Subir</button>
      <button class="btn btn-success" onclick="createFolder()">Nueva Carpeta</button>
      <button class="btn btn-warning" id="pasteBtn" onclick="pasteItem()" disabled>Pegar</button>
    </div>

    <!-- Mensajes -->
    <div id="statusMessage" class="mb-2"></div>

    <!-- Lista de archivos -->
    <ul id="fileList" class="list-group"></ul>
  </div>

  <script>
    let currentPath = '';
    let clipboard = null;

    // Actualiza el breadcrumb para mostrar dónde estás
    function updateBreadcrumb(path) {
      const breadcrumb = document.getElementById('breadcrumb');
      breadcrumb.innerHTML = '';

      const parts = path ? path.split('/') : [];
      const builtPaths = parts.map((_, i) => parts.slice(0, i + 1).join('/'));

      const root = document.createElement('li');
      root.className = 'breadcrumb-item';
      root.innerHTML = `<a href="#" onclick="navigateTo('')">Inicio</a>`;
      breadcrumb.appendChild(root);

      parts.forEach((part, index) => {
        const li = document.createElement('li');
        li.className = 'breadcrumb-item';
        if (index === parts.length - 1) {
          li.textContent = part;
          li.classList.add('active');
        } else {
          li.innerHTML = `<a href="#" onclick="navigateTo('${builtPaths[index]}')">${part}</a>`;
        }
        breadcrumb.appendChild(li);
      });
    }

    // Navega a una carpeta
    async function navigateTo(path = '') {
      currentPath = path;
      updateBreadcrumb(path);

      try {
        const res = await fetch(`/list?path=${encodeURIComponent(currentPath)}`);
        const items = await res.json();
        const list = document.getElementById('fileList');
        list.innerHTML = '';

        if (items.length === 0) {
          list.innerHTML = '<li class="list-group-item text-muted fst-italic">(Carpeta vacía)</li>';
          return;
        }

        items.forEach(item => {
          const li = document.createElement('li');
          li.className = 'list-group-item d-flex justify-content-between align-items-center';

          const nameSpan = document.createElement('span');
          nameSpan.textContent = item.name;
          nameSpan.style.cursor = 'pointer';
          if (item.type === 'directory') nameSpan.classList.add('fw-bold');
          nameSpan.onclick = () => {
            if (item.type === 'directory') navigateTo(item.path);
          };

          const actions = document.createElement('span');
          actions.className = 'btn-group btn-group-sm';
          actions.innerHTML = `
            <button class="btn btn-outline-secondary" onclick="copyToClipboard(event, '${item.path}')">Copiar</button>
            <button class="btn btn-outline-danger" onclick="deleteItem(event, '${item.path}')">Eliminar</button>
          `;

          li.appendChild(nameSpan);
          li.appendChild(actions);
          list.appendChild(li);
        });
      } catch (err) {
        showMessage('No se pudieron cargar los archivos.', true);
      }
    }

    // Subir archivos
    async function uploadFiles() {
      const input = document.getElementById('fileInput');
      if (!input.files.length) {
        showMessage('Elegí al menos un archivo para subir.', true);
        return;
      }

      const formData = new FormData();
      for (const file of input.files) formData.append('files', file);

      try {
        await fetch(`/upload?path=${encodeURIComponent(currentPath)}`, {
          method: 'POST',
          body: formData
        });
        showMessage('Archivos subidos correctamente.');
        navigateTo(currentPath);
        input.value = '';
      } catch {
        showMessage('Error al subir los archivos.', true);
      }
    }

    // Crear nueva carpeta
    async function createFolder() {
      const name = prompt('¿Cómo se llama la nueva carpeta?');
      if (!name) return;

      try {
        await fetch('/mkdir', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ name, path: currentPath })
        });
        showMessage('Carpeta creada.');
        navigateTo(currentPath);
      } catch {
        showMessage('No se pudo crear la carpeta.', true);
      }
    }

    // Copiar archivo o carpeta
    function copyToClipboard(e, path) {
      e.stopPropagation();
      clipboard = path;
      document.getElementById('pasteBtn').disabled = false;
      showMessage('Elemento copiado.');
    }

    // Pegar archivo o carpeta copiada
    async function pasteItem() {
      if (!clipboard) return;

      const name = clipboard.split('/').pop();
      const newName = prompt('Nuevo nombre (opcional):', name) || name;
      const dest = currentPath ? `${currentPath}/${newName}` : newName;

      try {
        await fetch('/copy', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ srcPath: clipboard, destPath: dest })
        });
        showMessage('Elemento pegado.');
        navigateTo(currentPath);
      } catch {
        showMessage('No se pudo pegar el elemento.', true);
      }
    }

    // Eliminar archivo o carpeta
    async function deleteItem(e, path) {
      e.stopPropagation();
      if (!confirm('¿Estás seguro de que querés eliminar esto?')) return;

      try {
        await fetch('/delete', {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ path })
        });
        showMessage('Elemento eliminado.');
        navigateTo(currentPath);
      } catch {
        showMessage('No se pudo eliminar.', true);
      }
    }

    // Mostrar mensajes
    function showMessage(msg, isError = false) {
      const el = document.getElementById('statusMessage');
      el.textContent = msg;
      el.className = isError ? 'text-danger' : 'text-success';
      setTimeout(() => el.textContent = '', 3000);
    }

    // Iniciar app
    document.addEventListener('DOMContentLoaded', () => navigateTo());
  </script>
   <a href="/logout">Cerrar sesión</a>
</body>
</html>

    
   
